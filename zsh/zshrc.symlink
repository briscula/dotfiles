TIME_START=$(($(gdate +%s%N) / 1000000))
export ZSHDOT=$HOME/.dotfiles

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

SYSTEM_INDEX=$ZSHDOT/system/index.zsh
source $SYSTEM_INDEX

typeset -U config_files
config_files=($ZSHDOT/*/index.zsh)

for file in $config_files
do
  if [ $file != $SYSTEM_INDEX ]; then
    source $file
  fi
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

unset config_files

######### nvm
# TODO rafael: try to move from here
# source "/usr/local/opt/nvm/nvm.sh"
# Add every binary that requires nvm, npm or node to run to an array of node globals
NODE_GLOBALS=(`find ~/.nvm/versions/node -maxdepth 3 -type l -wholename '*/bin/*' | xargs -n1 basename | sort | uniq`)
NODE_GLOBALS+=("node")
NODE_GLOBALS+=("nvm")
NODE_GLOBALS+=("npx")

# Lazy-loading nvm + npm on node globals call
load_nvm () {
  export NVM_DIR=~/.nvm
  [ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh"
}

# Making node global trigger the lazy loading
for cmd in "${NODE_GLOBALS[@]}"; do
  eval "${cmd}(){ unset -f ${NODE_GLOBALS}; load_nvm; ${cmd} \$@ }"
done

######### virtualenvwrapper
# export WORKON_HOME=$HOME/.virtualenvs
# export PROJECT_HOME=$HOME/Devel
# source /usr/local/bin/virtualenvwrapper.sh

######### virtualenv
alias vpython='[ -d "../vpython-$(basename $(pwd))" ] || virtualenv -p python2.7 ../vpython-$(basename $(pwd)); source ../vpython-$(basename $(pwd))/bin/activate'
alias vpython3='[ -d "../vpython-$(basename $(pwd))" ] || virtualenv -p python3.7 ../vpython-$(basename $(pwd)); source ../vpython-$(basename $(pwd))/bin/activate'

######### pyenv
eval "$(pyenv init -)"
export PYTHONUNBUFFERED=1

######### rvm
# # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
# export PATH="$PATH:$HOME/.rvm/bin"
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

######### sdkman
# #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="$HOME/.sdkman"
# [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

######### fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(e {})+abort'"

# For compilers to find zlib you may need to set:
export LDFLAGS="${LDFLAGS} -L/usr/local/opt/zlib/lib"
export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/zlib/include"

# For pkg-config to find zlib you may need to set:
export PKG_CONFIG_PATH="${PKG_CONFIG_PATH} /usr/local/opt/zlib/lib/pkgconfig"

PATH="~/bin:$PATH"

######### slack
# alias slack1="curl -X PUT http://pi1.local:9000/api/v1/inputs/1"
# alias slack2="curl -X PUT http://pi1.local:9000/api/v1/inputs/2"
# alias slack3="curl -X PUT http://pi1.local:9000/api/v1/inputs/3"

######### thumbor
# export LC_ALL=en_US.UTF-8
# export LANG=en_US.UTF-8

### https://github.com/deweller/switchaudio-osx
S_OUT_1="s -t output -s 'Built-in Output'"
S_OUT_2="s -t output -s 'HDMI'"
S_SYS_1="s -t system -s 'Built-in Output'"
S_SYS_2="s -t system -s 'HDMI'"
S_IN_1="s -t input -s 'ARCANO AM-BLACK-1 '" # yes, with a trailing space ¯\_(ツ)_/¯
S_IN_2="s -t input -s 'Built-in Microphone'"
alias s='SwitchAudioSource'
alias sn='s -n'
alias s1="($S_OUT_1) && ($S_SYS_1) && ($S_IN_1 || $S_IN_2)"
alias s2="($S_OUT_2) && ($S_SYS_2) && ($S_IN_1 || $S_IN_2)"

TIME_END=$(($(gdate +%s%N) / 1000000))
# enable to print the load time
# echo $((TIME_END-TIME_START))
